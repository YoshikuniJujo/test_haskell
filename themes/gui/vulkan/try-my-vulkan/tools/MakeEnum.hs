{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE LambdaCase #-}
{-# OPTIONS_GHC -Wall -fno-warn-tabs #-}

module MakeEnum where

import Data.List
import Data.Char
import Text.Nowdoc
import System.Environment

makeEnum :: String -> String -> String -> String -> IO ()
makeEnum hf hsnm cnm ext = do
	prg <- getProgName
	src <- readFile hf
	writeFile ("../src/Vulkan/" ++ hsnm ++ ".hsc") $
		header prg [] hsnm cnm ["Show", "Eq", "Storable"] ++
			intercalate ",\n" (map makeItem . takeDefinition cnm . removeBetaExtensions $ lines src) ++ " ]\n" ++
		case ext of "" -> ""; _ -> "\n" ++ ext ++ "\n"

removeBetaExtensions :: [String] -> [String]
removeBetaExtensions [] = []
removeBetaExtensions ("#ifdef VK_ENABLE_BETA_EXTENSIONS" : ls) =
	case dropWhile (/= "#endif") ls of
		[] -> error "no #endif"
		(_ : ls') -> removeBetaExtensions ls'
removeBetaExtensions (l : ls) = l : removeBetaExtensions ls

makeEnum' :: String -> [String] -> String -> String -> [String] -> String -> IO ()
makeEnum' hf icds hsnm cnm drvs ext = do
	prg <- getProgName
	src <- readFile hf
	writeFile ("../src/Vulkan/" ++ hsnm ++ ".hsc") $
		header prg icds hsnm cnm drvs ++
			intercalate ",\n" (map makeItem . takeDefinition cnm $ lines src) ++ " ]\n" ++
		case ext of "" -> ""; _ -> "\n" ++ ext ++ "\n"

makeEnum'' :: String -> [String] -> String -> String -> [(String, Const)] -> [String] -> String -> IO ()
makeEnum'' hf icds hsnm cnm elms drvs ext = do
	prg <- getProgName
	src <- readFile hf
	writeFile ("../src/Vulkan/" ++ hsnm ++ ".hsc") $
		header prg icds hsnm cnm drvs ++
			intercalate ",\n" (
				map (uncurry makeItemFromConst)
					. (elms ++)
					. map makeVarConstPair
					. takeDefinition cnm $ lines src
				) ++ " ]\n" ++
		case ext of "" -> ""; _ -> "\n" ++ ext ++ "\n"

takeDefinition :: String -> [String] -> [String]
takeDefinition nm =
	map (head . words) . takeWhile (not . (== "} " ++ nm ++ ";")) . tail
		. dropWhile (not . (("typedef enum " ++ nm ++ " {") `isPrefixOf`))

data Const = Int Int | Const String deriving Show

makeVarConstPair :: String -> (String, Const)
makeVarConstPair cnst = (nm, Const cnst)
	where nm = concat . map capitalize . tail $ sep '_' cnst

showConst :: Const -> String
showConst (Int n) = show n
showConst (Const cnst) = "#{const " ++ cnst ++ "}"

makeItemFromConst :: String -> Const -> String
makeItemFromConst nm cnst = "\t(\"" ++ nm ++ "\"," ++ sp ++ cst ++ ")"
	where
	cst = showConst cnst
	sp = if 8 + length nm + 5 + length cst + 2 > 80 then "\n\t\t" else " "

makeItem :: String -> String
makeItem = uncurry makeItemFromConst . makeVarConstPair
{-
makeItem cnst = '\t' : nm ++ sp ++ cst
	where
	nm = "(\"" ++ concat (map capitalize . tail $ sep '_' cnst) ++ "\","
	cst = "#{const " ++ cnst ++ "})"
	sp = if 8 + length nm + 1 + length cst + 1 > 80 then "\n\t\t" else " "
	-}

sep :: Eq a => a -> [a] -> [[a]]
sep s xs = case d of [] -> [t]; _ : r -> t : sep s r
	where (t, d) = span (/= s) xs
	
capitalize :: String -> String
capitalize = \case
	"" -> ""
	c : cs -> toUpper c : map toLower cs

header :: String -> [String] -> String -> String -> [String] -> String
header tnm icds hsnm cnm drvs =
	"-- This file is automatically generated by the tools/" ++ tnm ++
	".hs" ++ "\n--\t% stack runghc --cwd tools/ " ++ tnm ++
	[nowdoc|


{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE PatternSynonyms #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# OPTIONS_GHC -Wall -fno-warn-tabs #-}

module |] ++ "Vulkan." ++ hsnm ++ [nowdoc| where

import Foreign.Storable
import Foreign.C.Enum
import Data.Word
|] ++ unlines (("import " ++) <$> icds) ++ [nowdoc|

#include <vulkan/vulkan.h>

enum |] ++ "\"" ++ hsnm ++ "\" ''#{type " ++ cnm ++
	"}\n\t\t" ++ makeDrvs drvs ++ " [\n"

makeDrvs :: [String] -> String
makeDrvs = ('[' :) . (++ "]") . intercalate ", " . map ("''" ++)
