{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE LambdaCase #-}
{-# OPTIONS_GHC -Wall -fno-warn-tabs #-}

module Main where

import Data.List
import Data.Char
import Text.Nowdoc

main :: IO ()
main = do
	src <- readFile "/usr/include/vulkan/vulkan_core.h"
	writeFile "src/Vulkan/Format.hsc" $ header ++ intercalate ",\n" (map makeItem . takeVkFormat $ lines src) ++ " ]\n"

takeVkFormat :: [String] -> [String]
takeVkFormat = map (head . words) . takeWhile (not . (== "} VkFormat;")) . tail
	. dropWhile (not . ("typedef enum VkFormat {" `isPrefixOf`))

makeItem :: String -> String
makeItem cnst = '\t' : nm ++ sp ++ cst
	where
	nm = "(\"" ++ concat (map capitalize . tail $ sep '_' cnst) ++ "\","
	cst = "#{const " ++ cnst ++ "})"
	sp = if 8 + length nm + 1 + length cst + 1 > 80 then "\n\t\t" else " "

sep :: Eq a => a -> [a] -> [[a]]
sep s xs = case d of [] -> [t]; _ : r -> t : sep s r
	where (t, d) = span (/= s) xs
	
capitalize :: String -> String
capitalize = \case
	"" -> ""
	c : cs -> toUpper c : map toLower cs

header :: String
header = [nowdoc|
-- This file is automatically generated by the tools/makeEnumVkFormat.hs

{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE PatternSynonyms #-}
{-# OPTIONS_GHC -Wall -fno-warn-tabs #-}

module Vulkan.Format where

import Foreign.Storable
import Foreign.C.Enum
import Data.Word

#include <vulkan/vulkan.h>

enum "Format" ''#{type VkFormat} [''Show, ''Eq, ''Storable] [
|]
