2013.08.28 Wed.

環境を導入するときには StateT Env IO () を使う必要があるだろう。
ErrorT を使う必要があるな。
ErrorT (StateT Env IO) a のような感じ。

(a b c) と (a . (b . (c . ()))) とは同じものとして扱うべきか。

2013.08.29 Thr.

次は lambda を実装しよう。
環境を持つことを忘れないようにする必要がある。

lambda の nest は難しい気がするが ...。

2013.09.02 Mon.

今の実装だと、同一の closure は同一の環境を共有してしまっている。
これはまずいな。
外側の環境は共有しつつも、仮引数等の内側の引数は呼び出しごとに独立にする必要がある。
つまり、呼び出しの際に環境を作る必要がある。
ローカルな環境というものが必要。

つまり、closure の呼び出しにおいては、
local な環境 -> closure 内で global な環境 -> global な環境となる。
そして、closure 内で global な環境とは、外側の closure の local な環境の
copy であるはずだ。
また、local な環境は closure の呼び出しの終了時に消える。
ひとつ上の closure 内で global な環境はどうなるか。

つまり、環境の種類は [local]、変数に保持、global の三種類となる。
あまり美しくないな。
もっと美しく表現できるはずだ。

とりあえず Env.hs を作って environment 関係を module 化しよう。

2013.09.06 Fri.

環境の動きを整理しよう。
まずは global な環境がある。
そこで、closure を作る。
この場合、環境にはとくに変化は必要ない。
closure は global を参照すれば良い。
本当か?
上のやりかただと動的スコープになってしまわないだろうか。
むしろ、global のコピーを作る必要がないだろうか。

まずは、global をスタックの底に置いておく。
環境にはすべて独自の ID をふっておく。
また、外側の環境の ID も持つようにする。
普通に呼び出されたときには、そのスタックを上から順にたどっていく
(呼び出しが深くなったときに無駄がある気もするが)。
closure が作られたとしたらどうするか。
スタックの一番上の環境の ID をコピーし、
その時点でのスタックの内容を保存する。

上記のクロージャが呼ばれたらどうするか。
スタック上に新しい環境を積む。

呼び出し側のローカル変数は呼び出される側から参照されない。

closure が定義された時の環境のみが参照される。
そして、それは最終的には global に行き着く。
local な環境 -> closure が定義された時の環境 -> その外側 -> ... -> global

Env ID ID [(..., ...)]

つまり、実際のところ環境は2つのポインタを持つということだ。
ひとつは、変数参照に関する親を指す必要があり、
もうひとつは、関数が抜けたときにもどるべき環境ということだ。

こうするべきか。
つまり、([ID], [Env])
closure が呼び出されたときには、ID を参照する新しい環境を stack に push する。
環境から抜けるときは ID を pop する。
--> 今のところは、GC は使わないので、すぐに memory が一杯になってしまうだろう。
	実験的実装なので。

newEnv :: ID -> Monad ()
exitEnv :: Monad ()

closure を作るときには、現在の stack トップの ID を取り込めば良い。
つまり、

thisEnv :: Monad ID

あとは、define と set, get あたりか。

define :: Var -> Value -> Monad ()
set :: Var -> Value -> Monad ()
get :: Var -> Monad Value

とりあえずは Env 関係をまとめて、下のほうに置き、その後 module として独立させる。
そのあと上記の仕様に直す。

その前に、initEnv 関係を module に分けてしまおう。
Main - InitEnv - Env のような module 関係にしようかな。

とりあえず、Main - InitEnv - Env - Object のような module 関係にする。
その後、Main - InitEnv -+- Env
                        +- Object のようにしたい。

load があるので InitEnv を分ける前に Env を分けたほうが良さそうだ。

Parser も分けたいな。

Main - InitEnv - Parser - Env と分けるかな。

今のところ、

Main +- Parser - Env
     |
     +- Eval - Env

のような構造。

上を

Main +- Parser - Obj
     |
     +- Eval - Env - Obj

のようにしよう。
今の構造では無理だな。

Main +- Parser - Env
     |
     +- InitEnv - Eval - Env

としよう。

Env を Object から分けよう。
まずは、Env を Env から探すというやりかたをやめるべきだろう。

Env を data にしたうえで、中身をさらさないようにしよう。

いっそ全部書き直したほうが早いくらいだ。
一番まずかったのは、Env 自体を Object として Env のなかに格納したことか。

とりあえず closure の環境を閉じ込める機能を無くしてみるかな。

closure の中でその closure 自身を参照できる必要がある。
つまり、単純なコピーだけでは駄目ということ。

書き直したほうが早そうなので、今まで作ってきたものは、old directory に移そうと思う。

心機一転また書き直そう。
ちゃんと設計しよう。

まずは Object.hs を作り、それを import する Parser を作る。
つまり、parse すれば Object が返る。
Environment は Object に頼らない一般的なものとして書く。
Eval が Object と Environment を import し、
そのうえに InitialEnv として、いくつかの組み込みの subr を定義する。
load だけば parser が必要なので、Main で定義する。
と思ったが下のようにしてしまおうかな。

Main - InitialEnv -+- Parser - Object
                   |
                   +- Eval -+- Object
                            |
	                    +- Environment

まずは、プロンプトを出すあたりかな。

Object と Env の癒着をはがせないな。

InitEnv を別にするのと、それぞれの演算についても別にしようかな。

Main - InitialEnv -+- Subroutines - Object
                   |
		   +- Parser - Object
		   |
		   +- Eval -+- Object
		            |
			    +- Environment

逆ならできるかな?

Main - InitialEnv -+- Subroutines - Object - Environment
                   |
		   +- Parser - Object - ...
		   |
		   +- Eval - Object - ...

こうするか?

and や or には eval が必要なので、

Main - InitialEnv -+- Parser - Object - Env
                   |
		   +- Subrs - Eval - Object - Env

こうなるかな。
cast についてちゃんとやらなくちゃな。
cast2 :: Object -> Object -> (Object, Object) といった感じかな。
また forall をうまく活用する必要があるな。
とりあえず ODouble を作ろう。

その前に module の構造を上記のようにしておこう。
