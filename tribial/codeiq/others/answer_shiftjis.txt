※これは解答用テキストファイルです。

【必須】プログラムの実行結果（出力内容）を記入してください。
記入がない場合、プログラムの実行結果が正しくても減点の対象となります。


RGRGR
BGRGR
RBRGR
GBRGR
GRBGR
BRBGR
RGBGR
BGBGR
RGRBR
BGRBR
RBRBR
GBRBR
GRGBR
BRGBR
RBGBR
GBGBR
GRGRG
BRGRG
RBGRG
GBGRG
GRBRG
BRBRG
RGBRG
BGBRG
RGRBG
BGRBG
RBRBG
GBRBG
GRGBG
BRGBG
RBGBG
GBGBG
GRGRB
BRGRB
RBGRB
GBGRB
GRBRB
BRBRB
RGBRB
BGBRB
RGRGB
BGRGB
RBRGB
GBRGB
GRBGB
BRBGB
RGBGB
BGBGB
48







【必須】使用言語・動作環境について
(1)言語の種類を記入してください。未記入の場合、減点となります。

Haskell

(2)コンパイラ／インタプリタの名称・バージョン情報を記入してください。未記入の場合、減点となります。

The Glorious Glasgow Haskell Compilation System, version 7.6.3


【必須】プログラムの特長・工夫した点等、アピールポイントについて。
あなたが書いたコードの内容や工夫した点をわかりやすく説明してください。未記入の場合、大幅な減点となります。

リストモナドを利用してコードを読みやすくした。

【任意】もし企業からのスカウトメールがきたらどのくらい積極的にアクションすると思いますか？下記の3つから選んでお答えください。
 A.積極的に会ってみたいと思う
 B.社名や条件次第では会ってみたいと思う
 C.よほどのことがない限り返信しない

B

【必須】あなたが書いたコードを貼り付けてください。未記入の場合は評価できません。
コードが完全な形（そのままコンパイル・実行）できるものでない場合は程度に応じて減点の対象となります。



data RGB = R | G | B deriving (Show, Eq)

draw :: Int -> [[RGB]]
draw 0 = [[]]
draw n = do
	rgbs <- draw $ n - 1
	map (: rgbs) [x | x <- [R, G, B], null rgbs || x /= head rgbs]

main :: IO ()
main = putStr . unlines $
	let rgbs = draw 5 in map (concatMap show) rgbs ++ [show $ length rgbs]
