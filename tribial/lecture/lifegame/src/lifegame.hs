import Control.Concurrent
import Control.Arrow
import Control.Monad
import Data.Bool

type Raw = [Bool]
type Board = [Raw]
type Neighbors = [(Bool, [Bool])]
type State = [[(Bool, Int)]]

nbs :: Raw -> Raw -> Raw -> Neighbors
nbs (tl : ts@(t : tr : _)) (l : hs@(h : r : _)) (bl : bs@(b : br : _)) =
	(h, [tl, t, tr, l, r, bl, b, br]) : nbs ts hs bs
nbs (tl : t : _) (l : h : _) (bl : b : _) = [(h, [tl, t, l, bl, b])]
nbs _ _ _ = []

triples :: a -> [a] -> [(a, a, a)]
triples d xs = tpl $ d : xs
	where
	tpl (p : xs@(c : f : _)) = (p, c, f) : tpl xs
	tpl [p, c] = [(p, c, d)]
	tpl _ = []

uncurry3 :: (a -> b -> c -> d) -> (a, b, c) -> d
uncurry3 f (x, y, z) = f x y z

neighbors :: Board -> [Neighbors]
neighbors = map (uncurry3 nbs) . triples (repeat False) . map (False :)

state :: [Neighbors] -> State
state = map . map $ second (sum . map fromEnum)

next :: State -> Board
next = map . map $ \(h, n) -> if h then n == 2 || n == 3 else n == 3

readBoard :: [String] -> Board
readBoard = map $ map (== '*')

showBoard :: Board -> [String]
showBoard = map . map $ bool '-' '*'

sample1, sample2, sample3 :: Board
sample1 = readBoard [
	"______________________",
	"______________________",
	"______________________",
	"______________________",
	"______________________",
	"______________________",
	"___________***________",
	"___________*__________",
	"____________*_________",
	"______________________"
	]

sample2 = readBoard [
	"____________________________________________",
	"____________________________________________",
	"____________________________________________",
	"____________________________________________",
	"____________________________________________",
	"____________________________________________",
	"____________________________________________",
	"____________________________________________",
	"____________________________________________",
	"____________________________________________",
	"____________________________________________",
	"________________________*___________________",
	"______________________*_**__________________",
	"______________________*_*___________________",
	"______________________*_____________________",
	"____________________*_______________________",
	"__________________*_*_______________________",
	"____________________________________________",
	"____________________________________________",
	"____________________________________________",
	"____________________________________________",
	"____________________________________________",
	"____________________________________________",
	"____________________________________________"
	]

sample3 = readBoard [
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"_____________________________*________________",
	"___________________________*_*________________",
	"_________________**______**____________**_____",
	"________________*___*____**____________**_____",
	"_____**________*_____*___**___________________",
	"_____**________*___*_**____*_*________________",
	"_______________*_____*_______*________________",
	"________________*___*_________________________",
	"_________________**___________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________"
	]

sample4 = readBoard [
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"_____________________*________________________",
	"_______________**_____________________________",
	"________________*___***_______________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________",
	"______________________________________________"
	]

game :: Board -> [Board]
game = iterate $ next . state . neighbors

main'' :: IO ()
main'' = forM_ (take 450 $ game sample2) $ \b -> do
	putStrLn . unlines $ showBoard b
	threadDelay 100000

main' :: IO ()
main' = forM_ (take 250 $ game sample3) $ \b -> do
	putStrLn . unlines $ showBoard b
	threadDelay 100000

main :: IO ()
main = forM_ (take 140 $ game sample4) $ \b -> do
	putStrLn . unlines $ showBoard b
	threadDelay 100000
