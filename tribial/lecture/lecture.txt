1ヶ月で学ぶ Haskell

I. 基本

1. 基本的な値

数、文字、Bool値等を基本的な値とする。

2. 関数

ある値を別の値へ変換するもの。

3. 型

値には型がある。
簡単に言えば、数であるとき文字であるとか Bool 値であるとか。

4. 再帰

関数は自分自身を使って自分を定義することができる。

5. 型の定義

型を組み合わせて新しい型を作ることができる。

6. 再帰的な型

型の定義のなかで自分自身を使うことができる。

7. Tree を自分で定義してみる
8. List を自分で定義してみる
9. 関数の型

関数にも型があり、[入力値の型] -> [出力値の型] で表す。

演習
1. list の長さを求める関数
2. sum を求める関数

II. ラムダ計算

10. ラムダ記法に親しむ

map の例
map (\x -> x + 5) [1, 2, 3]

11. 関数定義はラムダ記法の糖衣構文

func x = ... は func = \x -> ... の糖衣構文

12. すべては変数に束縛された値

上記のようにすべては変数の束縛された値

13. 関数も値

関数も値なので、関数の引数にもなれるし、関数の結果にもなれる。

III. モナド

14. モナドとは

値を入れておく入れ物のようなものの持つ性質のひとつ。
>>= 演算子でつなぐことができるという性質を持つ。
>>= の型は m a -> (a -> m b) -> m b
a の入った入れ物から a を取り出し、
a を取り b の入った入れ物を帰す関数にわたすもの。

15. Maybe モナドについて

具体例として Maybe モナドを挙げる。
data Maybe a = Just a | Nothing という定義。
つまり失敗する可能性のある計算に使われる。
Maybe a と a -> Maybe b をつなぐ。
find の例。
lookup の例。
myList = [ ... ]
find odd myList >>= flip lookup [(9, 'a'), (11, 'b')]

16. モナドはレゴブロックのようなもの
17. IO モナド

IV. 演習

18. 数あてゲームを作る
18-1. ランダム関数の使いかた
18-2. 入力の読み込みかた
19. 折れ線グラフを作ってみる
19-1. xturtle を使う
19-2. ファイルの読み込みかた
20. BMP ファイルを作ってみる
20-1. File.Binary.BMP を使う
20-2. "**...**" のようなデータを黒白画像にする
20-3. 余力があれば赤も入れ3色にしてみる
20-4. その他、青黄緑も入れて6色にしてみる
