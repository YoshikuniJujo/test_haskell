* 第6回でIOに関する再帰的プロセスと反復的プロセスについて触れる
* 第7回の型クラスのところでNumクラスについて触れよう
* 落ち穂拾いのなかで触れるもの
	- let ... in ...
	- where
	- do内での let
	- do内でのパターンマッチ
	- let, where内でのパターンマッチ
	- トップでのパターンマッチ
	- field label
	- pattern guard (Haskell 2010に入った)
	- view pattern (Haskell 2010には入っていない)
	- --と{- ... -}、コメントについて
	- .lhs 文芸的プログラミングについて
	- as pattern
* pipe の代わりに >=> を使ってもいいかも
* ghcの使いかた
	- -iオプションは説明する必要がある
	- .cファイルや.oファイルも与えられる
	- -Oについて説明する必要がある
* どこかでgetArgsの使いかたを説明する必要があるな

* 第11回はきちんとした英語で書き直そう

* 第17回の次にやること
	- StateMaybeとStateIOを比較
		型と(>>=)の定義
		liftを一般化すればStateMaybeにも使えることを示す
			lookupの例が良いかな?
	- StateTを示す
		liftの一般化のときに出てきたliftに加えputとgetを持つ
		MonadStateクラスを示す。
	- MaybeState
	- MaybeIO
	- MaybeTを示す
	- liftについて
		MonadTransによるliftの一般化
	- class MonadTransについて
	- class MonadStateについて
	- ErrorMonadについて
