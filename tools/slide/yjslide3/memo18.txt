IO monadを説明するさいに、
arrowの方向から説明しようと考えてはいるが、
しかし、arrowにはできなくてmonadにはできることがあり、
そこをきちんと理解したうえでなければ嘘を教えてしまうことになる。

app :: a (a b c, b) c

arr :: (b -> c) -> a b c

mcon :: a () b -> (b -> a () c) -> a () c
mcon m f = m >>> arr (\x -> (f x, ())) >>> app

	f :: b -> a () c
	\x -> (f x, ()) :: \b -> (a () c, ())
	arr ... :: a b (a () c, ())
	... >>> app :: a b c

mcon2 :: (b -> a () c) -> (c -> a () d) -> (b -> a () d)
mcon2 f g =

	f :: b -> a () c

	g :: c -> a () d
	\x -> (g x, ()) :: \c -> (a () d, ())
	arr ... :: a c (a () d, ())
	... >>> app :: a c d			... (Y)

	\x -> f x >>> (Y) :: b -> a () d
	

app :: a (a b c, b) c

b -> a () c
   |
   V
a b c

(b -> a () c) -> a b c

b -> m c
a b c


some = do
	c <- getChar
	if c /= '\n' then some >>= return . (c :) else return ""
	|
	V
some = getChar >>= \c -> if c /= '\n' then some >>= return . (c :) else return ""
	|
	V
some = getChar >>= \c -> ite (c /= '\n') (some >>= return . (c :)) (return "")

some = getCharA >>> 

--
a -> IO b
なぜこの形にするのかの説明がしづらいのだが、
IOM a b
から導入するとわかりやすいように思うのだが、しかし...
IOM a b -> IOM b c -> IOM a cという関数なら説明しやすい。

(a -> IO b) -> (b -> IO c) -> (a -> IO c)はどうか?

IOM a bを使えば
arr :: (a -> b) -> IOM a b
も導入しやすい。
この段階でかなりのことができるが...。

fmap :: (b -> c) -> IOM a b -> IOM a c
fmap :: (b -> IOM a c) -> IOM a b -> IOM a (IOM a c)
flip fmap :: IOM a b -> (b -> IOM a c) -> IOM a (IOM a c)

IOMcn a b ==> a -> IOMcn () b

src :: IOMcn a b
dst :: a -> IOMcn () b
dst x = arr (const x) >>> src

src :: a -> IOMcn () b
dst :: IOMcn a b
dst = arr ((, ()) . src) >>> app
	arr ((, ()) . src) :: IOMcn a (IOMcn () b, ())	... X
	app :: IOMcn (IOMcn a' b', a') b'		... Y
	X >>> Y :: IOMcn a b

--

まずはIOMcn a bを示す。
arrは普通の関数をIOMcnにする関数。
arrを使えばいろいろな関数を間にはさめることを示す。
しかし、Bool -> IOMcn a bのような関数を使えないことを示す。
appは「械械とそれへの入力を与えると機械の出力を返す」機械。
これを使うとBool -> IOMcn a bのような関数が使えることよ示す。

arrとappを使うと(a -> IOMcn () b)のような形からIOMcn a bが導出できることを示す。
つまり、IOMcn a bではなく(a -> IOMcn () b)を定義しておけば良いことがわかる。
IOMcn a bのような形ではなくa -> IOMcn () bのような形に統一できるということ。
複数の関数をひとつの形に統一できる美しさがある。
IO = IOMcn ()のようにすれば良いことがわかる。

すると、
(>>>) :: IOMcn a b -> IOMcn b c -> IOMcn a cは
(a -> IO b) -> (b -> IO c) -> (a -> IO c)となる。

arr :: (a -> b) -> IOMcn a b
は、(a -> b) -> (a -> IO b)つまり、b -> IO b

app :: IOMcn (IOMcn a b, a) b
は、(a -> IO b, a) -> IO bで、これは以下で定義できる。
app (f, x) = f x

--

初心者向けなので、もっと議論の流れをわかりやすくしたい。
IOMcn a bをまずは示す。
arrでいろいろな関数をはさみこめることを示す。
Bool -> IOMcn a bのような形を使うにはappが必要なことを示す。

IOMcn a bがa -> IOMcn () bから作れることを示す。
	dst = arr ((, ()) . src) >>> app
なので、putStr等をはじめからString -> IOMcn () ()として作っておくことを考える。
IOMcn ()をIOとする。

すると、
(>>>) :: (a -> IO b) -> (b -> IO c) -> (a -> IO c)となり、
arr :: (a -> b) -> (a -> IO b)となり、
-- app :: (a -> IO b, a) -> IO bとなる。

つまり、ここで重要なのは、同じ型a -> IO bであってもその出自は異なるということ。

IOMcn a bをa -> IO bから作る。
	a -> (IO b, ())を作る。
	IOMcn a (IO b, ())
	IOMcn a (IOMcn () b, ())
	IOMcn (IOMcn a' b') b'につなぐ。

逆は?

a -> IO bをIOMcn a bから作る。
	src :: IOMcn a b
	dst :: a -> IOMcn () b
	dst x = arr (const x) >>> src
		const x :: () -> a
		arr (const x) :: IOMcn () a
		arr (const x) >>> src :: IOMcn () b
	dst = (>>> src) . arr . const
言い換えると、IOMcn a bとaからIOMcn () bを作るということ。
aから「何もないところからaを作る機械」が作れる。
「何もないところからaを作る機械」と「aからbを作る機械」をつなぐと
「何もないところからbを作る機械」が作れる。

a ==> IOMcn () a =(IOMcn a b)=> IOMcn () b

putStrLn "hello"が何をやってるか考える。
"hello"から「何もないところから"hello"をつくる機械」を作る。
「"hello"から何も作り出さない機械」にそれをつなぐ。

greeting bはbの値によって機械を選ぶ。

--> つまり同じに見えて、中身は違う。
--> もちろんすべての文字列に対してそれぞれの機械を用意していると考えてもいいが、
	あまり現実的でないメタファーはメタファーとしての価値が低い。

---

a -> b -> c -> d -> e -> IOMcn () f
a -> b -> c -> d -> IOMcn e f
a -> b -> c -> IOMcn (d, e) f
a -> b -> IOMcn (c, d, e) f
a -> IOMcn (b, c, d, e) f
IOMcn (a, b, c, d, e) f

まずは、これを示す。

(IOMcn a b)と(a -> IOMcn () b) == (a -> IO b)が同値なので、
以下を定義すれば良いことがわかる。
(>>>) :: (a -> IO b) -> (b -> IO c) -> (a -> IO c)
	(>>=) :: IO b -> (b -> IO c) -> IO c
arr :: (a -> b) -> (a -> IO b)
	return :: b -> IO b
app :: (a -> IO b, a) -> IO b
	app' :: (a -> IO b) -> a -> IO b
	app' = id
	app = uncurry id

---

なかなか良い例がないが、
app :: IOMcn (IOMcn a b, a) b
を直接使えるようなものを考えると以下のようになる。

some :: Bool -> (IOMcn String (), String)
some :: String -> Bool -> (IOMcn String (), String)

some :: :q
